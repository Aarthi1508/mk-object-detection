name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                  # set this to your preferred AWS region, e.g. us-east-1
  ECR_REPOSITORY: mk-aws-course-material           # set this to your Amazon ECR repository name
  ECS_SERVICE: mk-aws-application-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: mk-aws-application-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: devops/task-definition.json   # set this to the path to your Amazon ECS task definition
                                                    # file, e.g. .aws/task-definition.json
  ECS_TASK_DEFINITION_NAME: mk-aws-course-material-task      # ECS Task name
  CONTAINER_NAME: object-detection           # set this to the name of the container in the containerDefinitions section of your task definition
  AWS_S3_UPLOADED_IMAGES_FOLDER: uploaded_images
  AWS_S3_DETECTED_IMAGES_FOLDER: detected_images
  MONGODB_DATABASE: aws-django-application-poc
  MONGODB_COLLECTION: object-detection
  
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create .env file
      run: |
        echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
        echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
        echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" >> .env
        echo "AWS_S3_REGION=${{ env.AWS_REGION }}" >> .env
        echo "AWS_S3_UPLOADED_IMAGES_FOLDER=${{ env.AWS_S3_UPLOADED_IMAGES_FOLDER }}" >> .env
        echo "AWS_S3_DETECTED_IMAGES_FOLDER=${{ env.AWS_S3_DETECTED_IMAGES_FOLDER }}" >> .env
        echo "MONGODB_CLIENT_URL=${{ secrets.MONGODB_CLIENT_URL }}" >> .env
        echo "MONGODB_DATABASE=${{ env.MONGODB_DATABASE }}" >> .env
        echo "MONGODB_COLLECTION=${{ env.MONGODB_COLLECTION }}" >> .env
        
    - name: Stop the running ECS task
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --desired-count 0
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy the new Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
    - name: Start the new ECS task 
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --desired-count 1
